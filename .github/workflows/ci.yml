---
name: CI

on:
  push:
    branches:
      - '**'

jobs:
  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install modules
  #       run: npm install

  #     - name: Build
  #       run: npm run build
      
  #     # - name: Save build artifacts
  #     #   uses: actions/upload-artifact@v3
  #     #   with:
  #     #     name: contract-artifacts
  #     #     path: |
  #     #       artifacts
  #     #       cache/*.json


  # test-hardhat:
  #   name: Hardhat Test
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   needs:
  #     - build
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install modules
  #       run: npm install

  #     # - name: Load build artifacts
  #     #   uses: actions/download-artifact@v3
  #     #   with:
  #     #     name: contract-artifacts

  #     - name: Test
  #       run: npm run test:hardhat


  # test-forge:
  #   name: Forge Test
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   needs:
  #     - build
  #   steps:
  #     - uses: actions/checkout@v3

  #     # Forge needs node_modules/
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install modules
  #       run: npm install

  #     - name: Install Foundry
  #       uses: foundry-rs/foundry-toolchain@v1
  #       with:
  #         version: nightly

  #     - name: Run Forge build
  #       run: |
  #         forge --version
  #         forge build

  #     - name: Run Forge tests
  #       run: |
  #         forge test -vvv


  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   needs:
  #     - build
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install modules
  #       run: npm install

  #     - name: Lint
  #       run: npm run lint:check


  # contracts-size:
  #   name: Contracts Size
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   needs:
  #     - build
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install modules
  #       run: npm install

  #     # - name: Load build artifacts
  #     #   uses: actions/download-artifact@v3
  #     #   with:
  #     #     name: contract-artifacts

  #     - name: Check sizes
  #       run: npm run check-size


  # approve-test-bsc:
  #   name: Approve Test BSC
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test-hardhat
  #     - test-forge
  #     - lint
  #     - contracts-size
  #   steps:
  #     - name: manual approve
  #       run: echo "Manually approved"


  # approve-test-polygon:
  #   name: Approve Test Polygon
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test-hardhat
  #     - test-forge
  #     - lint
  #     - contracts-size
  #   steps:
  #     - name: manual approve
  #       run: echo "Manually approved"


  deploy-test-bsc:
    name: Deploy Test BSC
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # needs:
    #   - approve-test-bsc
    environment: test-bsc
    steps:
      - uses: actions/checkout@v3
        with:
          # token: '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'
          submodules: true

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install modules
        run: npm install

      # - name: Load build artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: contract-artifacts

      - name: Restore deployment artifacts
        run: |
          mkdir .openzeppelin
          cp ci-artifacts/test-bsc/* .openzeppelin/ || echo "Artifacts were not found"

      - name: Deploy
        run: npm run deploy
        env:
          DEPLOY_CONFIG_PATH: environments/test-bsc.yml
          HARDHAT_NETWORK: bsc
          MAINNET_PROVIDER_URL: '${{ vars.MAINNET_PROVIDER_URL }}'
          DEPLOYER_PRIVATE_KEY: '${{ secrets.DEPLOYER_PRIVATE_KEY }}'
          ETHERSCAN_APIKEY: '${{ secrets.ETHERSCAN_APIKEY }}'

      - name: Preserve deployment artifacts
        run: |
          echo Url1 https://x-access-token:'${{ secrets.GITHUB_TOKEN }}'@github.com/Scriptoz/ci-artifacts
          echo Url2 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/Scriptoz/ci-artifacts
          mkdir -p ci-artifacts/test-bsc/ && cp .openzeppelin/* $_ && cd ci-artifacts/test-bsc || exit 0
          git config --global user.name 'Git bot'
          git config --global user.email 'bot@noreply.github.com'
          git remote set-url origin https://x-access-token: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@github.com/Scriptoz/ci-artifacts
          git commit -am "Auto updated deploy artifacts" && git push || echo "No changes to commit"
        

  # deploy-test-polygon:
  #   name: Deploy Test Polygon
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   # needs:
  #   #   - approve-test-polygon
  #   environment: test-polygon
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install modules
  #       run: npm install

  #     # - name: Load build artifacts
  #     #   uses: actions/download-artifact@v3
  #     #   with:
  #     #     name: contract-artifacts

  #     - name: Deploy
  #       run: npm run deploy
  #       env:
  #         DEPLOY_CONFIG_PATH: environments/test-polygon.yml
  #         HARDHAT_NETWORK: polygon
  #         MAINNET_PROVIDER_URL: '${{ vars.MAINNET_PROVIDER_URL }}'
  #         DEPLOYER_PRIVATE_KEY: '${{ secrets.DEPLOYER_PRIVATE_KEY }}'
  #         ETHERSCAN_APIKEY: '${{ secrets.ETHERSCAN_APIKEY }}'


  # set-version-test-bsc:
  #   name: Set Version Test BSC
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   needs:
  #     - deploy-test-bsc
  #   steps:
  #     - name: SetVersion
  #       run: echo set version
        

  # set-version-test-polygon:
  #   name: Set Version Test Polygon
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   needs:
  #     - deploy-test-polygon
  #   steps:
  #     - name: SetVersion
  #       run: echo set version
