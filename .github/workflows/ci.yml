---
name: CI

on:
  push:
    branches:
      - '**'
    tags:
      - '**'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - uses: './.github/actions/prepare-node'

      - name: Build
        run: npm run build
      
      - name: Save build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            artifacts
            cache/*.json
            typechain-types


  test-hardhat:
    name: Hardhat Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - build
    steps:
      - uses: actions/checkout@v3

      - uses: './.github/actions/prepare-node'

      - name: Load build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Test
        run: npm run test:hardhat


  test-forge:
    name: Forge Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - build
    steps:
      - uses: actions/checkout@v3

      - uses: './.github/actions/prepare-node'

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run Forge build
        run: |
          forge --version
          forge build

      - name: Run Forge tests
        run: |
          forge test -vvv


  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - build
    steps:
      - uses: actions/checkout@v3

      - uses: './.github/actions/prepare-node'

      - name: Lint
        run: npm run lint:check


  contracts-size:
    name: Contracts Size
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
      
      - uses: './.github/actions/prepare-node'

      - name: Load build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Check sizes
        run: npm run check-size


  deploy-test-bsc:
    name: Deploy Test BSC
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - test-hardhat
      - test-forge
      - lint
      - contracts-size
    environment: test-bsc

    steps:
      - uses: actions/checkout@v3

      - uses: './.github/actions/prepare-node'

      - uses: './.github/actions/deploy'
        with:
          ENV_NAME: test-bsc
          CI_TOKEN: '${{ secrets.CI_TOKEN1 }}'
          HARDHAT_NETWORK: bsc
          MAINNET_PROVIDER_URL: '${{ vars.MAINNET_PROVIDER_URL }}'
          DEPLOYER_PRIVATE_KEY: '${{ secrets.DEPLOYER_PRIVATE_KEY }}'
          ETHERSCAN_APIKEY: '${{ secrets.ETHERSCAN_APIKEY }}'
          GNOSIS_SAFE_ADDRESS: '${{ vars.GNOSIS_SAFE_ADDRESS }}'
          GNOSIS_SAFE_SERVICE_URL: '${{ vars.GNOSIS_SAFE_SERVICE_URL }}'
          # CONTRACT_VERSION: '${{ github.sha }}'

  
  deploy-staging-bsc:
    name: Deploy Staging BSC
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - test-hardhat
      - test-forge
      - lint
      - contracts-size
    environment: staging-bsc

    steps:
      - uses: actions/checkout@v3

      - uses: './.github/actions/prepare-node'

      - uses: './.github/actions/deploy'
        with:
          ENV_NAME: staging-bsc
          CI_TOKEN: '${{ secrets.CI_TOKEN1 }}'
          HARDHAT_NETWORK: bsc
          MAINNET_PROVIDER_URL: '${{ vars.MAINNET_PROVIDER_URL }}'
          DEPLOYER_PRIVATE_KEY: '${{ secrets.DEPLOYER_PRIVATE_KEY }}'
          ETHERSCAN_APIKEY: '${{ secrets.ETHERSCAN_APIKEY }}'
          GNOSIS_SAFE_ADDRESS: '${{ vars.GNOSIS_SAFE_ADDRESS }}'
          GNOSIS_SAFE_SERVICE_URL: '${{ vars.GNOSIS_SAFE_SERVICE_URL }}'
          # CONTRACT_VERSION: '${{ github.sha }}'


  deploy-production-bsc:
    name: Deploy Production BSC
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - test-hardhat
      - test-forge
      - lint
      - contracts-size
    environment: production-bsc

    steps:
      - uses: actions/checkout@v3

      - uses: './.github/actions/prepare-node'

      - uses: './.github/actions/deploy'
        with:
          ENV_NAME: production-bsc
          CI_TOKEN: '${{ secrets.CI_TOKEN1 }}'
          HARDHAT_NETWORK: bsc
          MAINNET_PROVIDER_URL: '${{ vars.MAINNET_PROVIDER_URL }}'
          DEPLOYER_PRIVATE_KEY: '${{ secrets.DEPLOYER_PRIVATE_KEY }}'
          ETHERSCAN_APIKEY: '${{ secrets.ETHERSCAN_APIKEY }}'
          GNOSIS_SAFE_ADDRESS: '${{ vars.GNOSIS_SAFE_ADDRESS }}'
          GNOSIS_SAFE_SERVICE_URL: '${{ vars.GNOSIS_SAFE_SERVICE_URL }}'
          # CONTRACT_VERSION: '${{ github.sha }}'
